@import "../core/variables.less";
@import "../core/mixins.less";
@import "../grid/grid-mixins.less";


// Centered container element
.container-fixed() {
  margin-right: auto;
  margin-left: auto;
  padding-left:  (@grid-gutter-width / 2);
  padding-right: (@grid-gutter-width / 2);
  &:extend(.clearfix all);
}

// Container widths
//
// Set the container width, and override it for fixed navbars in media queries.
.container {
  .container-fixed();

  @media (min-width: @screen-sm-min) {
    width: @container-sm;
  }

  @media (min-width: @screen-md-min) {
    width: @container-md;
  }

  @media (min-width: @screen-lg-min) {
    width: @container-lg;
  }
}


// Fluid container
//
// Utilizes the mixin meant for fixed width containers, but without any defined
// width for fluid, full width layouts.

.container-fluid{
  .container-fixed();
}

.row{
  .make-row();
}
.col-default,
[class ^= "col-xs-"],
[class *= " col-xs-"],
[class ^= "col-sm-"],
[class *= " col-sm-"],
[class ^= "col-md-"],
[class *= " col-md-"],
[class ^= "col-lg-"],
[class *= " col-lg-"]{
  .col-default();
}

// Generate Extra Small grid Styles 
.grid-col-gen(xs, @grid-max-cols);

@media @grid-tablet-query{
  // Generate Small grid Styles
  .grid-col-gen(sm, @grid-max-cols);
}

@media @grid-desktop-query{

   // Generate Medium grid Styles
  .grid-col-gen(md, @grid-max-cols);
}

@media @grid-large-desktop-query{

  // Generate Large grid Styles
  .grid-col-gen(lg, @grid-max-cols);
}
